# -*- coding: utf-8 -*-
"""OOP_practice.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12NRTRGDiXgtS6L-B8L9tHdgXkBqgmvSu

# OOP Tutorial
This is an object oriented programming tutorial in python. Find the full explanation [here](https://www.youtube.com/watch?v=-LsuiVGO-88&list=PLqXS1b2lRpYRCbHe3sG5viisehpADOWUv&index=3).
"""

import numpy as np
import cv2 as cv
import random

# general parameters
WIDTH = 900
HEIGHT = 600
n_trees = 30
ground_level = HEIGHT-100

# blank image
bg = np.zeros((HEIGHT,WIDTH,3), dtype=np.uint8)
# draw background
cv.rectangle(bg,(WIDTH,0), (0, ground_level),(255,225,95), -1)

class Tree:
  def __init__(self, image):
    self.img = image
    self.loc = int(np.random.choice(range(900),1))
    self.ht = int(np.random.choice(range(200,350),1))
    self.radius = 50
    self.scale = np.random.choice(np.linspace(0.5,2.5, num=8),1)
  
  def generate_colours(self):
    green = (0, random.randint(130,200),0)
    light_green = (35, random.randint(200,250),35)
    brown = random.choice([(2,30,85), (5,55,120), (0,30,100)])
    return green, light_green, brown

  def draw(self):
    green, light_green, brown = self.generate_colours()
    small_radius = int(self.radius*self.scale-20*self.scale)
    # trunk
    cv.line(self.img, (self.loc, ground_level), (self.loc, ground_level-self.ht), brown, int(20*self.scale))
    cv.line(self.img, (self.loc, int(ground_level-self.ht+75*self.scale)), (int(self.loc+45*self.scale), int(ground_level-self.ht+small_radius)), brown, int(5*self.scale))
    cv.line(self.img, (self.loc, int(ground_level-self.ht+75*self.scale)), (int(self.loc-45*self.scale), int(ground_level-self.ht+small_radius)), brown, int(5*self.scale))
    # leaves
    cv.circle(self.img, (self.loc, ground_level-self.ht), int(self.radius*self.scale), green, -1) # -1 makes it fill the circle 
    cv.circle(self.img, (self.loc-int(45*self.scale), int(ground_level-self.ht+small_radius)), int(small_radius), green, -1)
    cv.circle(self.img, (self.loc+int(45*self.scale), int(ground_level-self.ht+small_radius)), int(small_radius), green, -1)
    # leaf highlights
    cv.circle(self.img, (self.loc, ground_level-self.ht), int(self.radius*self.scale-10*self.scale), light_green, -1) # -1 makes it fill the circle 
    cv.circle(self.img, (int(self.loc-45*self.scale), int(ground_level-self.ht+small_radius)), int(small_radius-10*self.scale), light_green, -1)
    cv.circle(self.img, (int(self.loc+45*self.scale), int(ground_level-self.ht+small_radius)), int(small_radius-10*self.scale), light_green, -1)
    #ground
    cv.rectangle(bg,(WIDTH,ground_level),(0, HEIGHT), (70,180,75), -1)
    return self.img

# display image
from google.colab.patches import cv2_imshow
for i in range(n_trees):
  img = Tree(bg).draw()
cv2_imshow(img)

cv.waitKey(0)
cv.destroyAllWindows()