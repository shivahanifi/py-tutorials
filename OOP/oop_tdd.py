# -*- coding: utf-8 -*-
"""OOP_TDD.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JP_x1bytk8TmcI6M9HBBKtQKyqILgrpu

## Test Driven Development

Create an encryption function that hides secret messages. [Link to this tutorial](https://www.youtube.com/watch?v=ibVSPVz2LAA)

Encryption Algorithm

- Cesar's Cipher: Takes the alphabet and shift them one character to the right
"""

import unittest
import string

def encrypt(message):
  abc = string.ascii_letters + string.punctuation + string.digits + " "
  encrypted_message = "".join([abc[abc.find(char) + 1] if len(abc)> (abc.find(char)+1) else abc[0] for idx, char in enumerate(message)])
  print(encrypted_message)
  return encrypted_message

class TestEncryption(unittest.TestCase):
  def setUp(self):
    self.my_message = "I am shiva!! 77"

  # test go here
  def test_inputExists(self):
    # specify assortions
    self.assertIsNotNone(self.my_message)

  def test_inputType(self):
    self.assertIsInstance(self.my_message, str)

  def test_functionReturnsSomething(self):
    self.assertIsNotNone(encrypt(self.my_message))

  def test_IO(self):
    self.assertEqual(len(self.my_message), len(encrypt(self.my_message)))
  
  def test_differentIO(self):
    self.assertNotIn(self.my_message, encrypt(self.my_message))
  
  def test_outputType(self):
    self.assertIsInstance(encrypt(self.my_message), str)

  def test_shiftedCipher(self):
    abc = string.ascii_letters + string.punctuation + string.digits + " "
    encrypted_message = "".join([abc[abc.find(char) + 1] if len(abc)> (abc.find(char)+1) else abc[0] for idx, char in enumerate(self.my_message)])
    print(encrypted_message)
    self.assertEqual(encrypted_message, encrypt(self.my_message))
unittest.main(argv=[''], verbosity=2, exit=False)